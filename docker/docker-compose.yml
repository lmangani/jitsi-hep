version: '3'

services:
    # Frontend
    web:
        image: jitsi/web
        ports:
            - '${HTTP_PORT}:80'
            - '${HTTPS_PORT}:443'
        volumes:
            - ${CONFIG}/web:/config
            - ./config/config.js:/config/config.js
        environment:
            - ENABLE_AUTH
            - ENABLE_GUESTS
            - ENABLE_LETSENCRYPT
            - ENABLE_HTTP_REDIRECT
            - DISABLE_HTTPS
            - JICOFO_AUTH_USER
            - LETSENCRYPT_DOMAIN
            - LETSENCRYPT_EMAIL
            - XMPP_DOMAIN
            - XMPP_AUTH_DOMAIN
            - XMPP_BOSH_URL_BASE=http://xmpp.meet.jitsi:5280
            - XMPP_GUEST_DOMAIN
            - XMPP_MUC_DOMAIN
            - TZ
        networks:
            meet.jitsi:

    # XMPP server
    prosody:
        image: jitsi/prosody
        expose:
            - '5222'
            - '5347'
            - '5280'
        volumes:
            - ${CONFIG}/prosody:/config
        environment:
            - ENABLE_AUTH
            - ENABLE_GUESTS
            - XMPP_DOMAIN
            - XMPP_AUTH_DOMAIN
            - XMPP_GUEST_DOMAIN
            - XMPP_MUC_DOMAIN
            - XMPP_INTERNAL_MUC_DOMAIN
            - JICOFO_COMPONENT_SECRET
            - JICOFO_AUTH_USER
            - JICOFO_AUTH_PASSWORD
            - JVB_AUTH_USER
            - JVB_AUTH_PASSWORD
            - JIGASI_XMPP_USER
            - JIGASI_XMPP_PASSWORD
            - TZ
        networks:
            meet.jitsi:
                aliases:
                    - xmpp.meet.jitsi

    # Focus component
    jicofo:
        image: jitsi/jicofo
        volumes:
            - ${CONFIG}/jicofo:/config
        environment:
            - ENABLE_AUTH
            - XMPP_DOMAIN
            - XMPP_AUTH_DOMAIN
            - XMPP_INTERNAL_MUC_DOMAIN
            - XMPP_SERVER=xmpp.meet.jitsi
            - JICOFO_COMPONENT_SECRET
            - JICOFO_AUTH_USER
            - JICOFO_AUTH_PASSWORD
            - JVB_BREWERY_MUC
            - JIGASI_BREWERY_MUC
            - TZ
        depends_on:
            - prosody
        networks:
            meet.jitsi:

    # Video bridge
    jvb:
        image: jitsi/jvb
        ports:
            - '${JVB_PORT}:${JVB_PORT}/udp'
            - '${JVB_TCP_PORT}:${JVB_TCP_PORT}'
        volumes:
            - ${CONFIG}/jvb:/config
        environment:
            - DOCKER_HOST_ADDRESS
            - XMPP_AUTH_DOMAIN
            - XMPP_INTERNAL_MUC_DOMAIN
            - XMPP_SERVER=xmpp.meet.jitsi
            - JVB_AUTH_USER
            - JVB_AUTH_PASSWORD
            - JVB_BREWERY_MUC
            - JVB_PORT
            - JVB_TCP_HARVESTER_DISABLED
            - JVB_TCP_PORT
            - JVB_STUN_SERVERS
            - JVB_ENABLE_APIS
            - JICOFO_AUTH_USER
            - TZ
        depends_on:
            - prosody
        networks:
            meet.jitsi:

    hepop:
      image: sipcapture/hepop:master
      container_name: hepop
      volumes:
        - ${CONFIG}/web:/config
        - ./config/myconfig.js:/app/myconfig.js
      ports:
        - "9069:8080"
        - "9060:9060"
        - "9060:9060/udp"
      restart: unless-stopped
      expose:
        - 9069
        - 9060
      depends_on:
        - web
        - db
        - loki
      networks:
        meet.jitsi:

    loki:
      image: grafana/loki:master
      container_name: loki
      volumes:
        - ./config/loki-local-config.yaml:/etc/loki/loki-local-config.yaml
      restart: unless-stopped
      expose:
        - 3100
      ports:
        - "3100:3100"
      command: "-config.file=/etc/loki/loki-local-config.yaml" 
      networks:
        meet.jitsi:

    homer-webapp:
      container_name: homer-webapp
      image: sipcapture/homer-app:master
      ports:
        - '9080:80'
      environment:
        - "DB_HOST=db"
        - "DB_USER=root"
        - "DB_PASS=homerSeven"
      restart: unless-stopped
      depends_on:
        - db
        - influxdb
      networks:
        meet.jitsi:
  
    db:
      image: postgres:11-alpine
      container_name: homer-db
      restart: always
      environment:
        POSTGRES_PASSWORD: homerSeven
        POSTGRES_USER: root
        POSTGRES_DB: localhost
      expose:
        - 5432
      restart: unless-stopped
      volumes:
        - ./config/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
        - ./postgres-data:/var/lib/postgresql/data
      healthcheck:
        test: ["CMD-SHELL", "psql -h 'localhost' -U 'root' -c '\\l'"]
        interval: 1s
        timeout: 3s
        retries: 30
      networks:
        meet.jitsi:

    influxdb:
      container_name: influxdb
      image: influxdb:1.7-alpine
      volumes:
        - ./influx:/var/lib/influxdb
      ports:
        - "8086:8086"
      expose:
        - 8086
      networks:
        meet.jitsi:

    chronograf:
      image: chronograf:1.7-alpine
      environment:
        INFLUXDB_URL: http://influxdb:8086
      expose:
        - 8888
      ports:
        - "8888:8888"
      links:
        - influxdb
      networks:
        meet.jitsi:


    provisioning:
      image: alpine:latest
      networks:
        meet.jitsi:
      depends_on:
        - influxdb
      links:
        - influxdb
      command: 
        - /bin/sh
        - -c
        - |
          apk add --no-cache curl;
          echo Waiting for influxdb API ...;
          while ! nc -z influxdb 8086;
          do
            sleep 2;
          done;
          echo InfluxDB Retention Policy push ...;
          curl -G http://influxdb:8086/query --data-urlencode 'q=CREATE DATABASE hep'
          echo Provisioning completed! Exiting ...;
          poweroff;


# Custom network so all services can communicate using a FQDN
networks:
    meet.jitsi:
